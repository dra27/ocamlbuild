(library
  (name        ocamlbuild_pack)
  (libraries   unix)
  (modules     (:standard ocamlbuild_config \ ocamlbuild_executor ocamlbuildlight ocamlbuild ocamlbuild_plugin ocamlbuild_unix_plugin ocamlbuildplug ppcache))
  (flags       (-w L -w R -w Z -safe-string))
  (modules_without_implementation signatures))

; This has to be done by hand, because we need ocamlbuild_config.ml to be
; #use_mod'able in the testsuite
(rule
  (with-stdout-to ocamlbuild_config.ml
                  (run %{bin:cppo}
                         -D "BINDIR %{read:bindir.probed}"
                         -D "LIBDIR %{read:libdir.probed}"
; TODO Test this on Windows (in particular the logic in ocamlbuild_where.ml and also the lib-pkg build on Linux/Windows for opam, which requires this to work)
                         -D "LIBDIR_ABS %{read:libdir.probed}"
                         -D "OCAMLLIB %{ocaml_where}"
                         -D "SUPPORTS_SHARED_LIBRARIES %{read:native.probed}"
                         -D "EXT_LIB %{ext_lib}"
                         -D "EXT_OBJ %{ext_obj}"
                         -D "EXT_SO %{ext_dll}"
                         -D "EXT_EXE %{ext_exe}"
                         -D "ARCH %{ocaml-config:architecture}"
                         -D "VERSION %{read:../VERSION}" %{dep:ocamlbuild_config.ml.in})))

(ocamllex (modules glob_lexer lexers))

(rule
  (targets bindir.probed)
  (mode    fallback)
  (action  (ignore-stderr (with-stdout-to %{targets} (system "opam config var bin || echo %{ocaml_bin}")))))

(rule
  (targets libdir.probed)
  (mode    fallback)
  (action  (ignore-stderr (with-stdout-to %{targets} (system "opam config var lib || ocamlfind printconf destdir || echo %{ocaml_where}")))))

(rule
  (targets native.probed)
  (mode    fallback)
  (action  (with-stdout-to %{targets} (echo %{ocaml-config:supports_shared_libraries}))))

(library
  (name        ocamlbuildlib_dune)
  (libraries   ocamlbuild_pack)
  (modules     ocamlbuild_plugin ocamlbuild_executor ocamlbuild_unix_plugin)
  (flags       (-w L -w R -w Z -safe-string))
  (wrapped     false))

(rule (with-stdout-to ocamlbuildplug.ml (cat ocamlbuild.ml)))

(library
  (name        ocamlbuild)
  (libraries   ocamlbuildlib_dune unix)
  (flags       (-w L -w R -w Z -safe-string))
  (modes       native byte)
  (modules     ocamlbuildplug)
  (wrapped     false))

(executable
  (name        ocamlbuild)
  (libraries   ocamlbuildlib_dune unix)
  (flags       (-w L -w R -w Z -safe-string))
  (modes       native byte)
  (modules     ocamlbuild))

(install
  (section lib)
  (files signatures.mli))
